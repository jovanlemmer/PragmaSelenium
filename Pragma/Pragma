.find_element_by_class_name(
.find_element(By.CLASS_NAME,

.find_element_by_css_selector(
.find_element(By.CSS_SELECTOR,

.find_element_by_id(
.find_element(By.ID,

.find_element_by_link_text(
.find_element(By.LINK_TEXT,

.find_element_by_name(
.find_element(By.NAME,

.find_element_by_partial_link_text(
.find_element(By.PARTIAL_LINK_TEXT,

.find_element_by_tag_name(
.find_element(By.TAG_NAME,

.find_element_by_xpath(
.find_element(By.XPATH,

.find_elements_by_class_name(
.find_elements(By.CLASS_NAME,

.find_elements_by_css_selector(
.find_elements(By.CSS_SELECTOR,

.find_elements_by_id(
.find_elements(By.ID,

.find_elements_by_link_text(
.find_elements(By.LINK_TEXT,

.find_elements_by_name(
.find_elements(By.NAME,

.find_elements_by_partial_link_text(
.find_elements(By.PARTIAL_LINK_TEXT,

.find_elements_by_tag_name(
.find_elements(By.TAG_NAME,

.find_elements_by_xpath(
.find_elements(By.XPATH,




Now
def click_and_select_from_dropdown(clk_element, clk_locator_type, drp_element, drp_locator_type, value):
  """
  Selects an option from a dropdown based on the provided element ID and locator type.
  :param clk_element: ID, Xpath, or Name of the element you want to click to get the dropdown element.
  :param clk_locator_type: By.ID, By.XPATH, or By.NAME.
  :param drp_element: ID, Xpath, or Name of the dropdown element.
  :param drp_locator_type: By.ID, By.XPATH, or By.NAME.
  :param value: Value indicating the visibility status of the element ("visible", "invisible", or the option to select)
  """
  if value.lower() == "invisible":
    # If the value is "invisible", check if the element is actually invisible
    is_element_invisible(clk_element, clk_locator_type)
  elif value.lower() == "visible":
    # If the value is "visible", check if the element is actually visible
    is_element_visible(clk_element, clk_locator_type)
  elif value.lower() == "blank":
    # If the value is "blank", check if the element is actually blank
    is_element_blank(clk_element, clk_locator_type)
  elif value.lower() == "enabled":
    # If the value is "enabled", check if the element is actually enabled
    is_element_enabled(clk_element, clk_locator_type)
  elif value.lower() == "disabled":
    # If the value is "disabled", check if the element is actually disabled
    is_element_disabled(clk_element, clk_locator_type)
  elif value.startswith("Val_"):  # Only deals with data that starts with "Val_"
    # This filters out "Val_" from the whole value
    the_suffix = value.removeprefix("Val_")  # == value.remove("Val_") == xxxx
    the_prefix = value.removesuffix(the_suffix)  # == value.remove(xxxx) == "Val_"
    if the_prefix == "Val_":
      validate_field_value(clk_element, clk_locator_type, the_suffix)
  else:
    try:
      # Printing function used
      logging.info("############################################################################################")
      logging.info("Function used: click_and_select_from_dropdown")

      Click_element = WebDriverWait(browser, 10).until(
        EC.element_to_be_clickable((clk_locator_type, clk_element)))

      # Hover over the element
      Click_element.click()
      time.sleep(1.2)

      # Select an item from the dropdown list
      dropdown_list = WebDriverWait(browser, 10).until(
        EC.element_to_be_clickable((drp_locator_type, drp_element)))

      browser.execute_script("arguments[0].click();", dropdown_list)  # Click

      logging.info(
        f"Selected option '{value}' from dropdown element '{clk_element}' by element locator type {clk_locator_type} - PASSED.")
      logging.info("############################################################################################")
    except Exception as e:
      logging.error(
        f"Failed to select option '{value}' from dropdown element '{clk_element}' by element locator type {clk_locator_type} - FAILED.")
      logging.critical(e)
      # Alert when something is wrong - START
      hold_alert_text = f"Failed to select option '{value}' from dropdown element '{clk_element}' by element " \
                        f"locator type {clk_locator_type} - FAILED."
      alert()
      is_alert_present()
      hold_alert(hold_alert_text)
      # Alert when something is wrong - End
      logging.info("############################################################################################")




      # Locate the element to hover over and select
            hover_on_element = WebDriverWait(browser, 10).until(
                EC.element_to_be_clickable((hover_locator_type, hover_element)))

            # Create an ActionChains object
            actions = ActionChains(browser)

            # Hover over the element
            actions.move_to_element(hover_on_element)

            # Perform the hover action
            actions.perform()

            # Now, locate the element to select (which may have become visible after hovering)
            dropdown_list = WebDriverWait(browser, 10).until(
                EC.element_to_be_clickable((drp_locator_type, drp_element)))

            browser.execute_script("arguments[0].click();", dropdown_list)  # Click








#Validate Text on inserted text
elem = WebDriverWait(browser, 10).until(EC.presence_of_element_located((locator_type, element)))
        value = elem.get_attribute("value")
        if value == assert_value:
            logging.info(f"Element {locator_type} used: {element}")
            logging.info(f"Value Found: {value}.")
            logging.info(f"Expected value: {assert_value} found - PASSED")
            logging.info("############################################################################################")
        else:
            logging.info(f"Element {locator_type} used: {element}")
            logging.info(f"Value Found: {value}.")
            logging.error(f"Expected value: {assert_value} not found - FAILED")